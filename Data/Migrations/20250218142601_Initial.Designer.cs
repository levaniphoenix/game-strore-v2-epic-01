// <auto-generated />
using System;
using Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(GamestoreDBContext))]
    [Migration("20250218142601_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("VARCHAR(5000)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = new Guid("74c673ee-af55-4f16-aed9-147a93fbe2ae"),
                            Description = "This is a test game",
                            Key = "test_game",
                            Name = "Test Game"
                        },
                        new
                        {
                            Id = new Guid("c5ee03cb-e9f5-4a52-a8a7-981698f5e228"),
                            Description = "This is a test game 2",
                            Key = "test_game_2",
                            Name = "Test Game 2"
                        },
                        new
                        {
                            Id = new Guid("3d5d2761-71b7-4c58-8d0c-49c4c00aa1f6"),
                            Description = "This is a test game 3",
                            Key = "test_game_3",
                            Name = "Test Game 3"
                        });
                });

            modelBuilder.Entity("Data.Entities.GameGenre", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GameGenres");

                    b.HasData(
                        new
                        {
                            GameId = new Guid("74c673ee-af55-4f16-aed9-147a93fbe2ae"),
                            GenreId = new Guid("93eaaa3c-a24c-4ff6-aee0-e9932805b722")
                        },
                        new
                        {
                            GameId = new Guid("74c673ee-af55-4f16-aed9-147a93fbe2ae"),
                            GenreId = new Guid("6856a56c-93e8-47a4-845e-f4c81b4cc7b7")
                        },
                        new
                        {
                            GameId = new Guid("c5ee03cb-e9f5-4a52-a8a7-981698f5e228"),
                            GenreId = new Guid("6856a56c-93e8-47a4-845e-f4c81b4cc7b7")
                        },
                        new
                        {
                            GameId = new Guid("3d5d2761-71b7-4c58-8d0c-49c4c00aa1f6"),
                            GenreId = new Guid("ecee198c-3567-4e5d-a772-bcca1711b858")
                        });
                });

            modelBuilder.Entity("Data.Entities.GamePlatform", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("GamePlatforms");

                    b.HasData(
                        new
                        {
                            GameId = new Guid("74c673ee-af55-4f16-aed9-147a93fbe2ae"),
                            PlatformId = new Guid("9fa91cb5-a91b-49c9-85b3-84aec784efb8")
                        },
                        new
                        {
                            GameId = new Guid("74c673ee-af55-4f16-aed9-147a93fbe2ae"),
                            PlatformId = new Guid("414bb869-2ea7-4107-909f-7e4b3601b1e0")
                        },
                        new
                        {
                            GameId = new Guid("c5ee03cb-e9f5-4a52-a8a7-981698f5e228"),
                            PlatformId = new Guid("414bb869-2ea7-4107-909f-7e4b3601b1e0")
                        },
                        new
                        {
                            GameId = new Guid("3d5d2761-71b7-4c58-8d0c-49c4c00aa1f6"),
                            PlatformId = new Guid("414bb869-2ea7-4107-909f-7e4b3601b1e0")
                        });
                });

            modelBuilder.Entity("Data.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<Guid?>("ParentGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentGenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("93eaaa3c-a24c-4ff6-aee0-e9932805b722"),
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = new Guid("6856a56c-93e8-47a4-845e-f4c81b4cc7b7"),
                            Name = "Sports Races"
                        },
                        new
                        {
                            Id = new Guid("ecee198c-3567-4e5d-a772-bcca1711b858"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("cbe02a7e-a369-4b96-9b22-badab86aab9f"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("35f416fd-5fe3-475d-b484-0ce8b96acce1"),
                            Name = "Skill"
                        },
                        new
                        {
                            Id = new Guid("8ef07862-b216-4c6c-bed1-986a0ffe0908"),
                            Name = "RTS",
                            ParentGenreId = new Guid("93eaaa3c-a24c-4ff6-aee0-e9932805b722")
                        },
                        new
                        {
                            Id = new Guid("a0c078ff-edcc-4633-9ca1-acad8e851a6d"),
                            Name = "TBS",
                            ParentGenreId = new Guid("93eaaa3c-a24c-4ff6-aee0-e9932805b722")
                        },
                        new
                        {
                            Id = new Guid("89fbe7c2-3fe1-4d68-8257-575314bea5a6"),
                            Name = "RPG",
                            ParentGenreId = new Guid("93eaaa3c-a24c-4ff6-aee0-e9932805b722")
                        },
                        new
                        {
                            Id = new Guid("f07a75a1-4952-4237-8c52-0dc0e6689f76"),
                            Name = "Rally",
                            ParentGenreId = new Guid("6856a56c-93e8-47a4-845e-f4c81b4cc7b7")
                        },
                        new
                        {
                            Id = new Guid("49787733-14d7-4386-b34c-dc7df00ae9c4"),
                            Name = "Arcade",
                            ParentGenreId = new Guid("6856a56c-93e8-47a4-845e-f4c81b4cc7b7")
                        },
                        new
                        {
                            Id = new Guid("b2d28ffc-78e4-44a2-9848-c9547c93110b"),
                            Name = "Formula",
                            ParentGenreId = new Guid("6856a56c-93e8-47a4-845e-f4c81b4cc7b7")
                        },
                        new
                        {
                            Id = new Guid("a4039240-2da5-4f0b-b0dd-a46e7775a377"),
                            Name = "Off-road",
                            ParentGenreId = new Guid("6856a56c-93e8-47a4-845e-f4c81b4cc7b7")
                        },
                        new
                        {
                            Id = new Guid("97569ead-61c6-4182-8875-70fc0d261868"),
                            Name = "FPS",
                            ParentGenreId = new Guid("ecee198c-3567-4e5d-a772-bcca1711b858")
                        },
                        new
                        {
                            Id = new Guid("f92b6381-4707-4173-9b4f-db050e552bc9"),
                            Name = "TPS",
                            ParentGenreId = new Guid("ecee198c-3567-4e5d-a772-bcca1711b858")
                        },
                        new
                        {
                            Id = new Guid("2d40e04d-83b8-425b-bfed-1c92c9b59228"),
                            Name = "Puzzle",
                            ParentGenreId = new Guid("cbe02a7e-a369-4b96-9b22-badab86aab9f")
                        });
                });

            modelBuilder.Entity("Data.Entities.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9fa91cb5-a91b-49c9-85b3-84aec784efb8"),
                            Type = "Mobile"
                        },
                        new
                        {
                            Id = new Guid("414bb869-2ea7-4107-909f-7e4b3601b1e0"),
                            Type = "Browser"
                        },
                        new
                        {
                            Id = new Guid("d4185120-0652-4e8f-9bba-2299a4508317"),
                            Type = "Desktop"
                        },
                        new
                        {
                            Id = new Guid("8a0cb8d9-757a-4b2c-9a34-cb65d3d17d66"),
                            Type = "Console"
                        });
                });

            modelBuilder.Entity("Data.Entities.GameGenre", b =>
                {
                    b.HasOne("Data.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Data.Entities.GamePlatform", b =>
                {
                    b.HasOne("Data.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("Data.Entities.Genre", b =>
                {
                    b.HasOne("Data.Entities.Genre", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentGenreId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Data.Entities.Genre", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
